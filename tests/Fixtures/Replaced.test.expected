<?php

namespace Tests\Unit\Foo\Bar\Application\Barbar\Entity;

use Uniter1\UniterRequester\PhpUnitTestHelper;
use Mockery;
use Mockery\Adapter\Phpunit\MockeryTestCase;
use Foo\Bar\Application\Barbar\Entity\Foo;

/**
* @see Foo
*/
class FooTest extends MockeryTestCase
{
    /**
    * @see Foo::bar()
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: bar, flow: , injection: self::FIRST
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: bar, flow: , injection: foo("arg1", "arg2", 10)
    */
    public function testBar()
    {
        /** @var Foo $privateMethodClass */
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic(Foo::class);
        $Foo = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals(EXPECTED_RETURN, $Foo->bar(ARG_v, ARG_w));
    }
   /**
    * @see Foo::fOne()
    * -- @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: fOne, flow: 1, injection: explode(",", $x)
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: fOne, flow: 1, injection: fTwo($argA, $argB, $argC, fThree($argD, $argE, $argF, $argG, $argH))
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: fOne, flow: 1, injection: count($colors)
    */
    public function testFOne1()
    {
        /** @var Foo $privateMethodClass */
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic(Foo::class);
        $Foo = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals(EXPECTED_RETURN, $Foo->fOne(ARG_argA, ARG_argB, ARG_argC, ARG_argD, ARG_argE, ARG_argF, ARG_argG, ARG_argH));
    }
    /**
    * @see Foo::fTwo()
    * --
    */
    public function testFTwo1()
    {
        /** @var Foo $privateMethodClass */
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic(Foo::class);
        $Foo = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals(EXPECTED_RETURN, $Foo->fTwo(ARG_strA, ARG_strB, ARG_strC, ARG_strD));
    }
    /**
    * @see Foo::fTwo()
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: fTwo, flow: 0, injection: $foo->one("a", "b")->two("c", "d", "e")->three("fg")->four()
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: fTwo, flow: 0, injection: a()->b()->c()
    */
    public function testFTwo0()
    {
        /** @var Foo $privateMethodClass */
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic(Foo::class);
        $Foo = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals(EXPECTED_RETURN, $Foo->fTwo(ARG_strA, ARG_strB, ARG_strC, ARG_strD));
    }
}
